{"version":3,"sources":["sound/imperialmarch.mp3","AudioPlayer.js","Ships.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AudioPlayer","props","autoPlay","controls","type","src","mp3_file","Ships","changeShip","e","setState","switchState","shipName","target","name","state","this","className","data","allStarships","edges","map","item","i","key","node","onClick","href","role","PFdata","starships","filmConnection","films","film","t","data-toggle","aria-expanded","aria-controls","title","id","episodeID","openingCrawl","director","producers","toString","releaseDate","pilotConnection","pilots","pilot","birthYear","eyeColor","gender","hairColor","height","mass","skinColor","homeworld","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ac109139.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/imperialmarch.45a3a39d.mp3\";","import React from \"react\";\r\nimport mp3_file from \"./sound/imperialmarch.mp3\";\r\n\r\nconst AudioPlayer = function (props) {\r\n  return (\r\n    <audio autoPlay={true} controls={true}>\r\n      <source type=\"audio/mp3\" src={mp3_file} />\r\n    </audio>\r\n  );\r\n};\r\nexport default AudioPlayer;\r\n","import React, { Component } from \"react\";\r\nimport data from \"./Ships.json\";\r\nimport PFdata from \"./PilotFilm.json\";\r\nimport AudioPlayer from \"./AudioPlayer\";\r\n\r\n//import { gql } from \"apollo-boost\";\r\n//import { Query } from \"react-apollo\";\r\n\r\n/* const getAllArticles = gql`\r\n  {\r\n    allStarships {\r\n      edges {\r\n        node {\r\n          id\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`; */\r\n\r\nclass Ships extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { switchState: 0, shipName: \"\" };\r\n  }\r\n\r\n  changeShip = (e) => {\r\n    //Change current ship to display details of\r\n    this.setState({ switchState: 1, shipName: e.target.name });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      /*\r\n    <Query query={getAllArticles}>\r\n      {({ loading, error, data }) => {\r\n        if (loading) return <p>Loading...</p>;\r\n        if (error) return;\r\n        return (\r\n          <div className=\"container\">\r\n            <h1>Articales</h1>\r\n            <div className=\"row\">\r\n              {data.client.map((article) => (\r\n                <h5 className=\"card-title\">{article.title}</h5>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        );\r\n      }}\r\n    </Query>*/\r\n      //<img className=\"card-img-top\" src=\"...\" alt=\"Card image cap\" />\r\n      <div>\r\n        <AudioPlayer />;\r\n        {this.state.switchState === 0 ? ( //Display ship names\r\n          <div className=\"list-group\">\r\n            {data.data.allStarships.edges.map((item, i) => (\r\n              <button //As clickable buttons\r\n                key={i}\r\n                type=\"button\"\r\n                className=\"btn btn-info\"\r\n                name={item.node.name}\r\n                onClick={this.changeShip}\r\n              >\r\n                {item.node.name}\r\n              </button>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          //QUERY\r\n          /* {\r\n  allStarships {\r\n    starships {\r\n      name\r\n      filmConnection {\r\n        films {\r\n          title\r\n          episodeID\r\n          openingCrawl\r\n          director\r\n          producers\r\n          releaseDate\r\n        }\r\n      }\r\n      pilotConnection {\r\n        pilots {\r\n          name\r\n          birthYear\r\n          eyeColor\r\n          gender\r\n          hairColor\r\n          height\r\n          mass\r\n          skinColor\r\n          homeworld {\r\n            name\r\n          }\r\n          \r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n */\r\n\r\n          // PFdata.data.allStarships.starships[0].filmConnection.films[0].title\r\n          <div>\r\n            <a href=\"https://messier81.github.io/starwars/\" role=\"button\">\r\n              Go Back\r\n            </a>\r\n\r\n            <div className=\"alert alert-danger\" role=\"alert\">\r\n              <h1>{this.state.shipName}</h1>\r\n            </div>\r\n            <div className=\"alert alert-light\" role=\"alert\">\r\n              <h4>Appeared In</h4>\r\n            </div>\r\n\r\n            {PFdata.data.allStarships.starships.map((item, i) =>\r\n              item.filmConnection.films.map((film, t) =>\r\n                item.name === this.state.shipName ? ( //Information about film\r\n                  <div className=\"alert alert-info\" role=\"alert\">\r\n                    <p>\r\n                      <a\r\n                        key={t}\r\n                        className=\"btn btn-primary\"\r\n                        data-toggle=\"collapse\"\r\n                        href={\"#multiCollapseExample1\" + t}\r\n                        role=\"button\"\r\n                        aria-expanded=\"false\"\r\n                        aria-controls=\"multiCollapseExample1\"\r\n                      >\r\n                        {film.title}\r\n                      </a>\r\n                    </p>\r\n                    <div className=\"row\">\r\n                      <div className=\"col\">\r\n                        <div\r\n                          className=\"collapse multi-collapse\"\r\n                          id={\"multiCollapseExample1\" + t}\r\n                        >\r\n                          <div className=\"card card-body\">\r\n                            <ul className=\"list-group\">\r\n                              <li className=\"list-group-item\">\r\n                                Episode #: {film.episodeID}\r\n                              </li>\r\n                              <li className=\"list-group-item\">\r\n                                Opening Crawl: {film.openingCrawl}\r\n                              </li>\r\n                              <li className=\"list-group-item\">\r\n                                Director: {film.director}\r\n                              </li>\r\n                              <li className=\"list-group-item\">\r\n                                Producers: {film.producers.toString()}\r\n                              </li>\r\n                              <li className=\"list-group-item\">\r\n                                Release Date: {film.releaseDate}\r\n                              </li>\r\n                            </ul>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  \"\"\r\n                )\r\n              )\r\n            )}\r\n            <div className=\"alert alert-light\" role=\"alert\">\r\n              <h4>Piloted By</h4>\r\n            </div>\r\n\r\n            {PFdata.data.allStarships.starships.map((item, i) =>\r\n              item.pilotConnection.pilots.map((pilot, t) =>\r\n                item.name === this.state.shipName ? ( //Information about pilot\r\n                  <div className=\"alert alert-warning\" role=\"alert\">\r\n                    <p>\r\n                      <a\r\n                        key={t}\r\n                        className=\"btn btn-primary\"\r\n                        data-toggle=\"collapse\"\r\n                        href={\"#multiCollapseExample1\" + t + \"aaa\"}\r\n                        role=\"button\"\r\n                        aria-expanded=\"false\"\r\n                        aria-controls=\"multiCollapseExample1\"\r\n                      >\r\n                        {pilot.name}\r\n                      </a>\r\n                    </p>\r\n                    <div className=\"row\">\r\n                      <div className=\"col\">\r\n                        <div\r\n                          className=\"collapse multi-collapse\"\r\n                          id={\"multiCollapseExample1\" + t + \"aaa\"}\r\n                        >\r\n                          <div className=\"card card-body\">\r\n                            <ul className=\"list-group\">\r\n                              <li className=\"list-group-item\">\r\n                                Birth Year: {pilot.birthYear}\r\n                              </li>\r\n                              <li className=\"list-group-item\">\r\n                                Eye Colour: {pilot.eyeColor}\r\n                              </li>\r\n                              <li className=\"list-group-item\">\r\n                                Gender: {pilot.gender}\r\n                              </li>\r\n                              <li className=\"list-group-item\">\r\n                                Hair Colour: {pilot.hairColor}\r\n                              </li>\r\n                              <li className=\"list-group-item\">\r\n                                Height: {pilot.height}\r\n                              </li>\r\n                              <li className=\"list-group-item\">\r\n                                Mass: {pilot.mass}\r\n                              </li>\r\n                              <li className=\"list-group-item\">\r\n                                Skin Colour: {pilot.skinColor}\r\n                              </li>\r\n                              <li className=\"list-group-item\">\r\n                                Home World: {pilot.homeworld.name}\r\n                              </li>\r\n                            </ul>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  \"\"\r\n                )\r\n              )\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Ships;\r\n","import React, { Component } from \"react\";\nimport Ships from \"./Ships\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Ships />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n//import ApolloClient from \"apollo-boost\";\n//import { ApolloProvider } from \"react-apollo\";\n\n//COMMENTED OFF BECAUSE OF CORS ERROR\n\n//const client = new ApolloClient({\n//uri: \"https://graphql.org/swapi-graphql/\",\n//});\n\nReactDOM.render(\n  //<ApolloProvider /*client={client}*/>\n  <App />,\n  //</ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}